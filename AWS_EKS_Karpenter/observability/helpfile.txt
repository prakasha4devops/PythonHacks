###################### EKS Create Cluster ##########################################################
eksctl create cluster -f cluster.yaml
aws eks describe-cluster --name karpenter-demo
aws eks update-kubeconfig --name karpenter-demo
#####################################################################################################

####################### installing Karpenter in AWS EKS #############################################
1.Set env variables

$CLUSTER_NAME="karpenter-demo"
$AWS_REGION="us-west-2"
$AWS_ACCOUNT_ID="357171621133"
$CLUSTER_ENDPOINT="https://871437BA5BC724D47893E34B5FAF4FE5.gr7.us-west-2.eks.amazonaws.com"
$AZ1="$AWS_REGION"+"a"
$AZ2="$AWS_REGION"+"b"

2. Create the IAM Role and Instance profile for Karpenter Nodes

aws cloudformation deploy `
  --stack-name "Karpenter-$CLUSTER_NAME" `
  --template-file "./cloudformation.yaml" `
  --capabilities CAPABILITY_NAMED_IAM `
  --parameter-overrides "ClusterName=$CLUSTER_NAME"

3. Add the Karpenter node role to the aws-auth configmap

eksctl create iamidentitymapping `
  --username 'system:node:{{EC2PrivateDNSName}}' `
  --cluster "karpenter-demo" `
  --arn "arn:aws:iam::357171621133:role/KarpenterNodeRole-karpenter-demo" `
  --group system:bootstrappers `
  --group system:nodes

kubectl describe configmap -n kube-system aws-auth

4. Create KarpenterController IAM Role
eksctl utils associate-iam-oidc-provider --cluster $CLUSTER_NAME --approve

eksctl create iamserviceaccount `
  --cluster "$CLUSTER_NAME" --name karpenter --namespace karpenter `
  --role-name "$CLUSTER_NAME-karpenter" `
  --attach-policy-arn "arn:aws:iam::357171621133:policy/KarpenterControllerPolicy-karpenter-demo" `
  --role-only `
  --approve

$KARPENTER_IAM_ROLE_ARN="arn:aws:iam::357171621133:role/$CLUSTER_NAME-karpenter"

eksctl get iamserviceaccount --cluster $CLUSTER_NAME --namespace karpenter

5. Create the EC2 Spot Service Linked Role

aws iam create-service-linked-role --aws-service-name spot.amazonaws.com

6. Install Karpenter using Helm

$response = Invoke-RestMethod -Uri "https://api.github.com/repos/aws/karpenter/releases/latest"
$KARPENTER_VERSION = $response.tag_name
$KARPENTER_VERSION_STR = $KARPENTER_VERSION -replace 'v'
Write-Output "Karpenter's Latest release version: $KARPENTER_VERSION_STR"

docker logout public.ecr.aws

helm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter --version $KARPENTER_VERSION_STR --namespace karpenter --create-namespace `
  --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$KARPENTER_IAM_ROLE_ARN `
  --set settings.clusterName=$CLUSTER_NAME `
  --set settings.clusterEndpoint=$CLUSTER_ENDPOINT `
  --set settings.interruptionQueue=$CLUSTER_NAME `
  --set settings.featureGates.drift=true `
  --wait

helm list -n karpenter
kubectl get pods --namespace karpenter
kubectl get deployment -n karpenter

######################################################################################################

1. kubectl -f observability_karpenter_nodepool_node_class.yaml create

  kubectl create namespace workshop

2. kubectl -f appDeploy.yaml create

3. helm repo add grafana-charts https://grafana.github.io/helm-charts
4. helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
5. helm repo update

6. kubectl create namespace monitoring

7. curl -fsSL https://raw.githubusercontent.com/aws/karpenter/$KARPENTER_VERSION/website/content/en/preview/getting-started/getting-started-with-karpenter/prometheus-values.yaml | tee prometheus-values.yaml

$url = "https://raw.githubusercontent.com/aws/karpenter/$KARPENTER_VERSION/website/content/en/preview/getting-started/getting-started-with-karpenter/prometheus-values.yaml"
$outputFile = "prometheus-values.yaml"

Invoke-WebRequest -Uri $url -OutFile $outputFile

8. helm install --namespace monitoring prometheus prometheus-community/prometheus --values prometheus-values.yaml


9. curl -fsSL https://raw.githubusercontent.com/aws/karpenter/$KARPENTER_VERSION/website/content/en/preview/getting-started/getting-started-with-karpenter/grafana-values.yaml | tee grafana-values.yaml

$url = "https://raw.githubusercontent.com/aws/karpenter/$KARPENTER_VERSION/website/content/en/preview/getting-started/getting-started-with-karpenter/grafana-values.yaml"
$outputFile = "grafana-values.yaml"

Invoke-WebRequest -Uri $url -OutFile $outputFile

10. helm install --namespace monitoring grafana grafana-charts/grafana --values grafana-values.yaml

11. kubectl -n monitoring get secret grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo

# Execute the kubectl command and capture the base64-encoded password
$base64Password = kubectl -n monitoring get secret grafana -o jsonpath="{.data.admin-password}"

# Decode the base64-encoded password
$decodedPassword = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($base64Password))

# Output the decoded password
Write-Output $decodedPassword


12. kubectl -n monitoring get svc grafana -ojson|jq '.status.loadBalancer.ingress[0].hostname'|tr -d '"'

# Execute the kubectl command and capture the JSON output
$jsonOutput = kubectl -n monitoring get svc grafana -o json

# Parse the JSON output
$parsedJson = $jsonOutput | ConvertFrom-Json

# Extract the hostname value
$hostname = $parsedJson.status.loadBalancer.ingress[0].hostname

# Output the hostname
Write-Output $hostname


13. kubectl -n workshop scale deployment inflate --replicas=30

14. kubectl -n karpenter logs -l app.kubernetes.io/name=karpenter

eksctl scale nodegroup --cluster=karpenter-demo --name=demo-ng --nodes=4
